%% Analysis code
% get behavior files, conccatenate same trials, run psignifit

% add psignifit toolbox
addpath('/Users/hopelutwak/Documents/MATLAB/psignifit')
addpath(genpath('/Applications/Psychtoolbox'))
addpath('/Users/hopelutwak/Documents/GitHub/VRopticflow/Analysis')
% addpath(genpath('C:\Users\hlutw\Documents\MATLAB\psignifit-master'))
% assign data folder
dataFolder = '/Users/hopelutwak/Documents/GitHub/VRopticflow/Data';
% dataFolder = 'cC:\Users\hlutw\Documents\GitHub\VRopticflow\Data';
figFolder = '/Users/hopelutwak/Documents/GitHub/VRopticflow/Figures';
analysisFolder = '/Users/hopelutwak/Documents/GitHub/VRopticflow/Analysis';
% names of files
S = dir(fullfile(dataFolder,'*.mat'));

% which subjects data to analyze
subjects = ["MP"]; %"HL" "IK"
% all: "PL", "MP", "SM", "JL", "IK", "JO", "KZ", "IG"
stims = ["full-1", "full-2"]; %["full-1", "full-2"]; %"pilot" ["monocular-1", "monocular-2"]
depth_range = .05;


% loop over all subjects

for s  = 1:length(subjects)

    data = [];
    %load appropriate files
    count = 0;
    for f = 1:length(S)
        subj = contains(S(f).name,subjects(s));
        sti = contains(S(f).name,stims);
        
        if subj && sti
            load(fullfile(dataFolder,S(f).name));
            n_conditions = length(pa.speed)*length(pa.direction);
            conditions = fullfact([numel(pa.speed), numel(pa.direction)]);
            data_session = [];
            for cond = 1:n_conditions
                idx_speed = find(pa.fullFactorial(:,3) == pa.speed(conditions(cond,1)));
                idx_direction = find(pa.fullFactorial(:,4) == pa.direction(conditions(cond,2)));
                idx = intersect(idx_speed, idx_direction);
                data_session(cond,:) = [nan(1) nan(1) pa.speed(conditions(cond,1)), rad2deg(pa.direction(conditions(cond,2))), sum(eq(pa.LR(idx), pa.LRresponse(idx))), pa.nRepeats];
            end
            [dconst, dsurr] = DistanceToConstraint(ds, pa, depth_range);
            data_session(:,1) = dconst(:);
            data_session(:,2) = dsurr(:);
            data = [data; data_session];
            data_const = [data(:,1) data(:,end-1:end)]; % to surround data_const = [data(:,1) data(:,end-1:end)];
            data_surr = [data(:,2) data(:,end-1:end)];
            count = count+1;
            
        end

    end

    
    options             = struct;   % initialize as an empty struct
    options.sigmoidName = 'weibull';   
    options.expType     = '2AFC';   % choose 2-AFC as the paradigm of the experiment
                                    % this sets the guessing rate to .5 and
                                    % fits the rest of the parameters
    options.fixedPars = NaN(5,1);   
%     options.fixedPars(3) = .01; % fix lapse rate at 1%
%     options.fixedPars(5) = 0;       % fix eta (dispersion) to zero
% 4 speeds, 6 directions
    options.dataColor = [255,153,255; 255,102,255; 255,51,255; 204,0,204;
                        255,153,153; 255,102,102; 255,51,51; 204,0,0;
                        255,204,153; 255,178,102; 255, 153, 51; 204,102,0;
                        204,255,153; 178,255,102; 153,255,51; 102,204,0;
                        153,255,255; 102,255,255; 51,255,255; 0,204,204;
                        153,153,255; 102,102,255; 51,51,255; 0,0,204]/255;

    result_const = psignifit(data_const,options);
    options.fixedPars(3) = result_const.Fit(3); % fix lapse rate at calculated for constraint
    result_surr = psignifit(data_surr, options);
    figure, plotPsych(result_const, options);
    title(['distance to constraint, depth range = ', num2str(depth_range)])
    figname = [subjects(s)+'_const_'+stims(1)+'.eps'];
%     saveas(gcf, fullfile(figFolder, figname), 'epsc')
    
    figure, plotPsych(result_surr, options);
    title('distance to surround')
    figname = [subjects(s)+'_surr_'+stims(1)+'.eps'];
%     saveas(gcf, fullfile(figFolder, figname), 'epsc')

    
end

%% deviance differences
x = categorical({'constraint', 'surround'});
conds = categorical({'full', 'dots', 'monocular'});
conds = reordercats(conds, {'full', 'dots', 'monocular'});
subjects = ["MP","DL","PL", "MG", "SM", "JL", "IK", "JO", "KZ","IG"];

const.full = [16, 37, 52, 24, 29, 33, 38, 61, 21, 40];
surr.full = [312,137,184,195,219,225, 112, 230,143,139];

const.dots = [71	93	29	83	62	91	85	26	120	38];
surr.dots = [233	269	106	144	134	215	203	301	264	110];

const.mono = [41	29	44	18	42	29	40	47	39	24];
surr.mono = [203	208	253	150	250	225	153	221	217	157];


% % const vs surround
% fig = figure();
% for d = 1:length(const)
%     hold on, plot(x, [const(d), surr(d)],'.-','MarkerSize',20,'LineWidth', 2)
% end
% title('Monocular')
% set(gca, 'FontSize', 16)
% 
% ylim([0. 350])

c = lines(length())

% const for each stimulus
x = categorical(["full" "monocular" "dots"]);
x = reordercats(x,string(x));

fig = figure();
for d = 1:length(const.full)
%     hold on, plot(conds, [const.full(d)', const.dots(d)', const.mono(d)'], '.-','MarkerSize',20,'LineWidth', 2)
%     hold on, plot([conds(1) conds(3)], [const.full(d)', const.mono(d)'], '.-','MarkerSize',20,'LineWidth', 2) 
    hold on, plot(x, [surr.full(d)', surr.mono(d)', surr.dots(d)'], '.-', 'color', c(d,:),'MarkerSize',20,'LineWidth', 2) 

end
set(gca, 'FontSize', 16)
hold on, plot(x, mean([surr.full', surr.mono', surr.dots']), '.-', 'color', [.25 .25 .25],'MarkerSize',30,'LineWidth', 5)
legend([subjects, "mean"])

%   figname = "deviance_comparison";
%  saveas(gcf, fullfile(figFolder, figname), 'epsc')

fig = figure();
for d = 1:length(const.full)
%     hold on, plot(conds, [const.full(d)', const.dots(d)', const.mono(d)'], '.-','MarkerSize',20,'LineWidth', 2)
%     hold on, plot([conds(1) conds(3)], [const.full(d)', const.mono(d)'], '.-','MarkerSize',20,'LineWidth', 2) 
    hold on, plot(x, [const.full(d)', const.mono(d)', const.dots(d)'], '.-', 'color', c(d,:),'MarkerSize',20,'LineWidth', 2) 

end
set(gca, 'FontSize', 16)
hold on, plot(x, mean([const.full', const.mono', const.dots']), '.-', 'color', [.25 .25 .25],'MarkerSize',30,'LineWidth', 5)
legend([subjects, "mean"])
ylim([0 150])
figname = "deviance_combined";
% saveas(gcf, fullfile(figFolder, figname), 'epsc')

% scatter const vs surround
figure, scatter(const.full, surr.full, 50, 'filled')
axis equal
xlim([0 350])
ylim([0 350])

hold on
plot([min([xlim ylim]) max([xlim ylim])], [min([xlim ylim]) max([xlim ylim])], '--k')


%% iterate over different values of distance to const
distances  = linspace(0.025, 0.15, 10);

% window of distances cube could physically be distances  = linspace(.05, .6, 10);
% constraint_length_opt distances = linspace(0.025, 0.15, 10)
dev = zeros(1,length(distances));

for d = 1:length(distances)
    [dconst, dsurr] = DistanceToConstraint(ds, pa, distances(d));
    data_const(:,1) = repmat(dconst(:), count, 1);

    % run psignifit
    result = psignifit(data_const,options);
    figure, plotPsych(result, options);
%     thresh = exp(result.Fit(1));
    dev(d) = result.deviance;
end

[val,idx] = min(dev);


if idx == length(distances)
    distances_ext = linspace(distances(end)+mean(diff(distances)), (distances(end))+10*mean(diff(distances)), 10);
    dev_ext = zeros(1,length(distances_ext));
    
    for d = 1:length(distances_ext)
        [dconst, dsurr] = DistanceToConstraint(ds, pa, distances_ext(d));
        data_const(:,1) = repmat(dconst(:), count, 1);
        
        % run psignifit
        result = psignifit(data_const,options);
        figure, plotPsych(result, options);
        %     thresh = exp(result.Fit(1));
        dev_ext(d) = result.deviance;
    end
    
    dev = [dev dev_ext];
    distances = [distances distances_ext];
elseif idx == 1
    distances_prev = linspace(max(0,distances(1)-10*mean(diff(distances))), distances(1)-mean(diff(distances)), 10);
    dev_prev = zeros(1,length(distances_prev));
    
    for d = 1:length(distances_prev)
        [dconst, dsurr] = DistanceToConstraint(ds, pa, distances_prev(d));
        data_const(:,1) = repmat(dconst(:), count, 1);
        
        % run psignifit
        result = psignifit(data_const,options);
        figure, plotPsych(result, options);
        %     thresh = exp(result.Fit(1));
        dev_prev(d) = result.deviance;
    end
    
    dev = [dev_prev dev];
    distances = [distances_prev distances];
end

% subj distances deviances
% save dev and distances
% if contains(stims, "monocular")
%     save( fullfile(subjects(s), distances.mat) "distances"
%%
%load constraint_legnth_opt.mat
% replace correct array in mat file

save (fullfile(analysisFolder, "constraint_length_opt.mat"), "constraint_length_opt")

%% full vs dots vs monocular
figure, hold on, plot(distances, dev, 'LineWidth', 2)

figure
for s = 1:3
    hold on, plot(constraint_length_opt(8).distances{s}, constraint_length_opt(8).dev{s}, 'LineWidth', 2)
    
end
legend('full', 'dots', 'monocular')
set(gca, 'FontSize', 16)
